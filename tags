!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/felix/src/robot_arm/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
ADDR_AX_ALARM_LED	src/Ax12.py	/^ADDR_AX_ALARM_LED = 17$/;"	v
ADDR_AX_ALARM_SHUTDOWN	src/Ax12.py	/^ADDR_AX_ALARM_SHUTDOWN = 18$/;"	v
ADDR_AX_BAUD_RATE	src/Ax12.py	/^ADDR_AX_BAUD_RATE = 4$/;"	v
ADDR_AX_CCW_ANGLE_LIMIT_H	src/Ax12.py	/^ADDR_AX_CCW_ANGLE_LIMIT_H = 9$/;"	v
ADDR_AX_CCW_ANGLE_LIMIT_L	src/Ax12.py	/^ADDR_AX_CCW_ANGLE_LIMIT_L = 8$/;"	v
ADDR_AX_CCW_COMPLIANCE_MARGIN	src/Ax12.py	/^ADDR_AX_CCW_COMPLIANCE_MARGIN = 27$/;"	v
ADDR_AX_CCW_COMPLIANCE_SLOPE	src/Ax12.py	/^ADDR_AX_CCW_COMPLIANCE_SLOPE = 29$/;"	v
ADDR_AX_CW_ANGLE_LIMIT_H	src/Ax12.py	/^ADDR_AX_CW_ANGLE_LIMIT_H = 7$/;"	v
ADDR_AX_CW_ANGLE_LIMIT_L	src/Ax12.py	/^ADDR_AX_CW_ANGLE_LIMIT_L = 6$/;"	v
ADDR_AX_CW_COMPLIANCE_MARGIN	src/Ax12.py	/^ADDR_AX_CW_COMPLIANCE_MARGIN = 26$/;"	v
ADDR_AX_CW_COMPLIANCE_SLOPE	src/Ax12.py	/^ADDR_AX_CW_COMPLIANCE_SLOPE = 28$/;"	v
ADDR_AX_DOWN_CALIBRATION_H	src/Ax12.py	/^ADDR_AX_DOWN_CALIBRATION_H = 21$/;"	v
ADDR_AX_DOWN_CALIBRATION_L	src/Ax12.py	/^ADDR_AX_DOWN_CALIBRATION_L = 20$/;"	v
ADDR_AX_GOAL_POSITION	src/tests/test2.py	/^ADDR_AX_GOAL_POSITION      = 30$/;"	v
ADDR_AX_GOAL_POSITION	src/tests/test3.py	/^ADDR_AX_GOAL_POSITION       = 30$/;"	v
ADDR_AX_GOAL_POSITION_H	src/Ax12.py	/^ADDR_AX_GOAL_POSITION_H = 31$/;"	v
ADDR_AX_GOAL_POSITION_L	src/Ax12.py	/^ADDR_AX_GOAL_POSITION_L = 30$/;"	v
ADDR_AX_GOAL_SPEED_H	src/Ax12.py	/^ADDR_AX_GOAL_SPEED_H = 33$/;"	v
ADDR_AX_GOAL_SPEED_L	src/Ax12.py	/^ADDR_AX_GOAL_SPEED_L = 32$/;"	v
ADDR_AX_ID	src/Ax12.py	/^ADDR_AX_ID = 3$/;"	v
ADDR_AX_LED	src/Ax12.py	/^ADDR_AX_LED = 25$/;"	v
ADDR_AX_LIMIT_TEMPERATURE	src/Ax12.py	/^ADDR_AX_LIMIT_TEMPERATURE = 11$/;"	v
ADDR_AX_LOCK	src/Ax12.py	/^ADDR_AX_LOCK = 47$/;"	v
ADDR_AX_MAX_LIMIT_VOLTAGE	src/Ax12.py	/^ADDR_AX_MAX_LIMIT_VOLTAGE = 13$/;"	v
ADDR_AX_MAX_TORQUE_H	src/Ax12.py	/^ADDR_AX_MAX_TORQUE_H = 15$/;"	v
ADDR_AX_MAX_TORQUE_L	src/Ax12.py	/^ADDR_AX_MAX_TORQUE_L = 14$/;"	v
ADDR_AX_MIN_LIMIT_VOLTAGE	src/Ax12.py	/^ADDR_AX_MIN_LIMIT_VOLTAGE = 12$/;"	v
ADDR_AX_MODEL_NUMBER_H	src/Ax12.py	/^ADDR_AX_MODEL_NUMBER_H = 1$/;"	v
ADDR_AX_MODEL_NUMBER_L	src/Ax12.py	/^ADDR_AX_MODEL_NUMBER_L = 0$/;"	v
ADDR_AX_MOVING	src/Ax12.py	/^ADDR_AX_MOVING = 46$/;"	v
ADDR_AX_MOVING	src/tests/test3.py	/^ADDR_AX_MOVING              = 46$/;"	v
ADDR_AX_OPERATING_MODE	src/Ax12.py	/^ADDR_AX_OPERATING_MODE = 19$/;"	v
ADDR_AX_PAUSE_TIME	src/Ax12.py	/^ADDR_AX_PAUSE_TIME = 45$/;"	v
ADDR_AX_PRESENT_LOAD_H	src/Ax12.py	/^ADDR_AX_PRESENT_LOAD_H = 41$/;"	v
ADDR_AX_PRESENT_LOAD_L	src/Ax12.py	/^ADDR_AX_PRESENT_LOAD_L = 40$/;"	v
ADDR_AX_PRESENT_POSITION	src/tests/test2.py	/^ADDR_AX_PRESENT_POSITION   = 36$/;"	v
ADDR_AX_PRESENT_POSITION	src/tests/test3.py	/^ADDR_AX_PRESENT_POSITION    = 36$/;"	v
ADDR_AX_PRESENT_POSITION_H	src/Ax12.py	/^ADDR_AX_PRESENT_POSITION_H = 37$/;"	v
ADDR_AX_PRESENT_POSITION_L	src/Ax12.py	/^ADDR_AX_PRESENT_POSITION_L = 36$/;"	v
ADDR_AX_PRESENT_SPEED_H	src/Ax12.py	/^ADDR_AX_PRESENT_SPEED_H = 39$/;"	v
ADDR_AX_PRESENT_SPEED_L	src/Ax12.py	/^ADDR_AX_PRESENT_SPEED_L = 38$/;"	v
ADDR_AX_PRESENT_TEMPERATURE	src/Ax12.py	/^ADDR_AX_PRESENT_TEMPERATURE = 43$/;"	v
ADDR_AX_PRESENT_VOLTAGE	src/Ax12.py	/^ADDR_AX_PRESENT_VOLTAGE = 42$/;"	v
ADDR_AX_PUNCH_H	src/Ax12.py	/^ADDR_AX_PUNCH_H = 49$/;"	v
ADDR_AX_PUNCH_L	src/Ax12.py	/^ADDR_AX_PUNCH_L = 48$/;"	v
ADDR_AX_REGISTERED_INSTRUCTION	src/Ax12.py	/^ADDR_AX_REGISTERED_INSTRUCTION = 44$/;"	v
ADDR_AX_RETURN_DELAY_TIME	src/Ax12.py	/^ADDR_AX_RETURN_DELAY_TIME = 5$/;"	v
ADDR_AX_RETURN_LEVEL	src/Ax12.py	/^ADDR_AX_RETURN_LEVEL = 16$/;"	v
ADDR_AX_SYSTEM_DATA2	src/Ax12.py	/^ADDR_AX_SYSTEM_DATA2 = 10$/;"	v
ADDR_AX_TORQUE_ENABLE	src/Ax12.py	/^ADDR_AX_TORQUE_ENABLE = 24$/;"	v
ADDR_AX_TORQUE_ENABLE	src/tests/test2.py	/^ADDR_AX_TORQUE_ENABLE      = 24               # Control table address is different in Dynamixel /;"	v
ADDR_AX_TORQUE_ENABLE	src/tests/test3.py	/^ADDR_AX_TORQUE_ENABLE       = 24               # Control table address is different in Dynamixel/;"	v
ADDR_AX_TORQUE_LIMIT_H	src/Ax12.py	/^ADDR_AX_TORQUE_LIMIT_H = 35$/;"	v
ADDR_AX_TORQUE_LIMIT_L	src/Ax12.py	/^ADDR_AX_TORQUE_LIMIT_L = 34$/;"	v
ADDR_AX_UP_CALIBRATION_H	src/Ax12.py	/^ADDR_AX_UP_CALIBRATION_H = 23$/;"	v
ADDR_AX_UP_CALIBRATION_L	src/Ax12.py	/^ADDR_AX_UP_CALIBRATION_L = 22$/;"	v
ADDR_AX_VERSION	src/Ax12.py	/^ADDR_AX_VERSION = 2$/;"	v
ADDR_MX_BAUDRATE	src/tests/factory_reset.py	/^    ADDR_MX_BAUDRATE            = 4                 # Control table address is different in Dyna/;"	v
Ax12	src/Ax12.py	/^class Ax12:$/;"	c
BAUDRATE	src/Ax12.py	/^    BAUDRATE = 1_000_000  # Dynamixel default baudrate$/;"	v	class:Ax12
BAUDRATE	src/tests/factory_reset.py	/^    BAUDRATE                    = 1000000             # Dynamixel default baudrate : 57600$/;"	v
BAUDRATE	src/tests/test2.py	/^BAUDRATE                    = 1000000             # Dynamixel default baudrate : 57600$/;"	v
BAUDRATE	src/tests/test3.py	/^BAUDRATE                    = 1_000_000             # Dynamixel default baudrate : 57600$/;"	v
DEBUG	src/Ax12.py	/^    DEBUG = True$/;"	v	class:Ax12
DEVICENAME	src/Ax12.py	/^    DEVICENAME = '\/dev\/ttyUSB0'  # e.g 'COM3' windows or '\/dev\/ttyUSB0' for linux$/;"	v	class:Ax12
DEVICENAME	src/tests/factory_reset.py	/^    DEVICENAME                  = '\/dev\/ttyUSB0'    # Check which port is being used on your c/;"	v
DEVICENAME	src/tests/test2.py	/^DEVICENAME                  = '\/dev\/ttyUSB0'    # Check which port is being used on your contr/;"	v
DEVICENAME	src/tests/test3.py	/^DEVICENAME                  = '\/dev\/ttyUSB0'    # Check which port is being used on your contr/;"	v
DXL1_ID	src/tests/test3.py	/^DXL1_ID                     = 1                 # Dynamixel#1 ID : 1$/;"	v
DXL2_ID	src/tests/test3.py	/^DXL2_ID                     = 2                 # Dynamixel#1 ID : 2$/;"	v
DXL_ID	src/tests/factory_reset.py	/^    DXL_ID                      = int(arg)                 # Dynamixel ID : 1$/;"	v
DXL_ID	src/tests/test2.py	/^DXL_ID                      = 1                 # Dynamixel ID : 1$/;"	v
DXL_MAXIMUM_POSITION_VALUE	src/tests/test2.py	/^DXL_MAXIMUM_POSITION_VALUE  = 1023            # and this value (note that the Dynamixel would no/;"	v
DXL_MAXIMUM_POSITION_VALUE	src/tests/test3.py	/^DXL_MAXIMUM_POSITION_VALUE  = 1023            # and this value (note that the Dynamixel would no/;"	v
DXL_MINIMUM_POSITION_VALUE	src/tests/test2.py	/^DXL_MINIMUM_POSITION_VALUE  = 0           # Dynamixel will rotate between this value$/;"	v
DXL_MINIMUM_POSITION_VALUE	src/tests/test3.py	/^DXL_MINIMUM_POSITION_VALUE  = 0           # Dynamixel will rotate between this value$/;"	v
DXL_MOVING_STATUS_THRESHOLD	src/tests/test2.py	/^DXL_MOVING_STATUS_THRESHOLD = 20                # Dynamixel moving status threshold$/;"	v
DXL_MOVING_STATUS_THRESHOLD	src/tests/test3.py	/^DXL_MOVING_STATUS_THRESHOLD = 20                # Dynamixel moving status threshold$/;"	v
Documentation	README.md	/^## Documentation$/;"	s	chapter:Robot Arm
Experimental observations	README.md	/^## Experimental observations$/;"	s	chapter:Robot Arm
FACTORYRST_DEFAULTBAUDRATE	src/tests/factory_reset.py	/^    FACTORYRST_DEFAULTBAUDRATE  = 1000000             # Dynamixel baudrate set by factoryreset$/;"	v
Installation	README.md	/^## Installation$/;"	s	chapter:Robot Arm
LEN_AX_GOAL_POSITION	src/tests/test3.py	/^LEN_AX_GOAL_POSITION        = 2$/;"	v
LEN_AX_MOVING	src/tests/test3.py	/^LEN_AX_MOVING               = 1$/;"	v
LEN_AX_PRESENT_POSITION	src/tests/test3.py	/^LEN_AX_PRESENT_POSITION     = 2$/;"	v
NEW_BAUDNUM	src/tests/factory_reset.py	/^    NEW_BAUDNUM                 = 1000000                 # New baudnum to recover Dynamixel bau/;"	v
OPERATION_MODE	src/tests/factory_reset.py	/^    OPERATION_MODE              = 0x02              # Mode is unavailable in Protocol 1.0 Reset$/;"	v
PROTOCOL_VERSION	src/Ax12.py	/^    PROTOCOL_VERSION = 1.0$/;"	v	class:Ax12
PROTOCOL_VERSION	src/tests/factory_reset.py	/^    PROTOCOL_VERSION            = 1.0               # See which protocol version is used in the /;"	v
PROTOCOL_VERSION	src/tests/test2.py	/^PROTOCOL_VERSION            = 1.0               # See which protocol version is used in the Dyna/;"	v
PROTOCOL_VERSION	src/tests/test3.py	/^PROTOCOL_VERSION            = 1.0               # See which protocol version is used in the Dyna/;"	v
Robot Arm	README.md	/^# Robot Arm$/;"	c
TORQUE_DISABLE	src/tests/test2.py	/^TORQUE_DISABLE              = 0                 # Value for disabling the torque$/;"	v
TORQUE_DISABLE	src/tests/test3.py	/^TORQUE_DISABLE              = 0                 # Value for disabling the torque$/;"	v
TORQUE_ENABLE	src/tests/test2.py	/^TORQUE_ENABLE               = 1                 # Value for enabling the torque$/;"	v
TORQUE_ENABLE	src/tests/test3.py	/^TORQUE_ENABLE               = 1                 # Value for enabling the torque$/;"	v
Usage	README.md	/^## Usage$/;"	s	chapter:Robot Arm
__init__	src/Ax12.py	/^    def __init__(self, motor_id):$/;"	m	class:Ax12
__repr__	src/Ax12.py	/^    def __repr__(self):$/;"	m	class:Ax12
check_error	src/Ax12.py	/^    def check_error(comm_result, dxl_err):$/;"	m	class:Ax12
connect	src/Ax12.py	/^    def connect(cls):$/;"	m	class:Ax12
deg2raw	src/Ax12.py	/^    def deg2raw(delta_deg):$/;"	m	class:Ax12
disable_torque	src/Ax12.py	/^    def disable_torque(self):$/;"	m	class:Ax12
disconnect	src/Ax12.py	/^    def disconnect(cls):$/;"	m	class:Ax12
dxl1_present_position	src/tests/test3.py	/^        dxl1_present_position = groupBulkRead.getData(DXL1_ID, ADDR_AX_PRESENT_POSITION, LEN_AX_/;"	v
dxl2_moving_value	src/tests/test3.py	/^        dxl2_moving_value = groupBulkRead.getData(DXL2_ID, ADDR_AX_MOVING, LEN_AX_MOVING)$/;"	v
dxl_addparam_result	src/tests/test3.py	/^dxl_addparam_result = groupBulkRead.addParam(DXL1_ID, ADDR_AX_PRESENT_POSITION, LEN_AX_PRESENT_P/;"	v
dxl_addparam_result	src/tests/test3.py	/^dxl_addparam_result = groupBulkRead.addParam(DXL2_ID, ADDR_AX_MOVING, LEN_AX_MOVING)$/;"	v
dxl_baudnum_read	src/tests/factory_reset.py	/^    dxl_baudnum_read, dxl_comm_result, dxl_error = packetHandler.read1ByteTxRx(portHandler, DXL_/;"	v
dxl_comm_result	src/tests/factory_reset.py	/^    dxl_baudnum_read, dxl_comm_result, dxl_error = packetHandler.read1ByteTxRx(portHandler, DXL_/;"	v
dxl_comm_result	src/tests/factory_reset.py	/^    dxl_comm_result, dxl_error = packetHandler.factoryReset(portHandler, DXL_ID, OPERATION_MODE)$/;"	v
dxl_comm_result	src/tests/factory_reset.py	/^    dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL_ID, ADDR_MX_BAUDR/;"	v
dxl_comm_result	src/tests/test2.py	/^        dxl_present_position, dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandl/;"	v
dxl_comm_result	src/tests/test2.py	/^    dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_AX_GOAL_/;"	v
dxl_comm_result	src/tests/test2.py	/^dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL_ID, ADDR_AX_TORQUE_EN/;"	v
dxl_comm_result	src/tests/test3.py	/^        dxl_comm_result = groupBulkRead.txRxPacket()$/;"	v
dxl_comm_result	src/tests/test3.py	/^    dxl_comm_result, dxl_error = packetHandler.write4ByteTxRx(portHandler, DXL1_ID, ADDR_AX_GOAL/;"	v
dxl_comm_result	src/tests/test3.py	/^    dxl_comm_result, dxl_error = packetHandler.write4ByteTxRx(portHandler, DXL2_ID, ADDR_AX_GOAL/;"	v
dxl_comm_result	src/tests/test3.py	/^dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL1_ID, ADDR_AX_TORQUE_E/;"	v
dxl_comm_result	src/tests/test3.py	/^dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL2_ID, ADDR_AX_TORQUE_E/;"	v
dxl_error	src/tests/factory_reset.py	/^    dxl_baudnum_read, dxl_comm_result, dxl_error = packetHandler.read1ByteTxRx(portHandler, DXL_/;"	v
dxl_error	src/tests/factory_reset.py	/^    dxl_comm_result, dxl_error = packetHandler.factoryReset(portHandler, DXL_ID, OPERATION_MODE)$/;"	v
dxl_error	src/tests/factory_reset.py	/^    dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL_ID, ADDR_MX_BAUDR/;"	v
dxl_error	src/tests/test2.py	/^        dxl_present_position, dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandl/;"	v
dxl_error	src/tests/test2.py	/^    dxl_comm_result, dxl_error = packetHandler.write2ByteTxRx(portHandler, DXL_ID, ADDR_AX_GOAL_/;"	v
dxl_error	src/tests/test2.py	/^dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL_ID, ADDR_AX_TORQUE_EN/;"	v
dxl_error	src/tests/test3.py	/^    dxl_comm_result, dxl_error = packetHandler.write4ByteTxRx(portHandler, DXL1_ID, ADDR_AX_GOAL/;"	v
dxl_error	src/tests/test3.py	/^    dxl_comm_result, dxl_error = packetHandler.write4ByteTxRx(portHandler, DXL2_ID, ADDR_AX_GOAL/;"	v
dxl_error	src/tests/test3.py	/^dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL1_ID, ADDR_AX_TORQUE_E/;"	v
dxl_error	src/tests/test3.py	/^dxl_comm_result, dxl_error = packetHandler.write1ByteTxRx(portHandler, DXL2_ID, ADDR_AX_TORQUE_E/;"	v
dxl_getdata_result	src/tests/test3.py	/^        dxl_getdata_result = groupBulkRead.isAvailable(DXL1_ID, ADDR_AX_PRESENT_POSITION, LEN_AX/;"	v
dxl_getdata_result	src/tests/test3.py	/^        dxl_getdata_result = groupBulkRead.isAvailable(DXL2_ID, ADDR_AX_MOVING, LEN_AX_MOVING)$/;"	v
dxl_goal_position	src/tests/test2.py	/^dxl_goal_position = [DXL_MINIMUM_POSITION_VALUE, DXL_MAXIMUM_POSITION_VALUE]         # Goal posi/;"	v
dxl_goal_position	src/tests/test3.py	/^dxl_goal_position = [DXL_MINIMUM_POSITION_VALUE, DXL_MAXIMUM_POSITION_VALUE]        # Goal posit/;"	v
dxl_present_position	src/tests/test2.py	/^        dxl_present_position, dxl_comm_result, dxl_error = packetHandler.read2ByteTxRx(portHandl/;"	v
enable_torque	src/Ax12.py	/^    def enable_torque(self):$/;"	m	class:Ax12
fd	src/tests/factory_reset.py	/^    fd = sys.stdin.fileno()$/;"	v
fd	src/tests/test2.py	/^    fd = sys.stdin.fileno()$/;"	v
fd	src/tests/test3.py	/^    fd = sys.stdin.fileno()$/;"	v
get_alarm_led	src/Ax12.py	/^    def get_alarm_led(self):$/;"	m	class:Ax12
get_baudrate	src/Ax12.py	/^    def get_baudrate(self):$/;"	m	class:Ax12
get_ccw_angle_limit	src/Ax12.py	/^    def get_ccw_angle_limit(self):$/;"	m	class:Ax12
get_ccw_compliance_margin	src/Ax12.py	/^    def get_ccw_compliance_margin(self):$/;"	m	class:Ax12
get_ccw_compliance_slope	src/Ax12.py	/^    def get_ccw_compliance_slope(self):$/;"	m	class:Ax12
get_cw_angle_limit	src/Ax12.py	/^    def get_cw_angle_limit(self):$/;"	m	class:Ax12
get_cw_compliance_margin	src/Ax12.py	/^    def get_cw_compliance_margin(self):$/;"	m	class:Ax12
get_cw_compliance_slope	src/Ax12.py	/^    def get_cw_compliance_slope(self):$/;"	m	class:Ax12
get_firmware_version	src/Ax12.py	/^    def get_firmware_version(self):$/;"	m	class:Ax12
get_goal_position	src/Ax12.py	/^    def get_goal_position(self):$/;"	m	class:Ax12
get_id	src/Ax12.py	/^    def get_id(self):$/;"	m	class:Ax12
get_load	src/Ax12.py	/^    def get_load(self):$/;"	m	class:Ax12
get_lock	src/Ax12.py	/^    def get_lock(self):$/;"	m	class:Ax12
get_max_torque	src/Ax12.py	/^    def get_max_torque(self):$/;"	m	class:Ax12
get_max_voltage_limit	src/Ax12.py	/^    def get_max_voltage_limit(self):$/;"	m	class:Ax12
get_min_voltage_limit	src/Ax12.py	/^    def get_min_voltage_limit(self):$/;"	m	class:Ax12
get_model_number	src/Ax12.py	/^    def get_model_number(self):$/;"	m	class:Ax12
get_moving_speed	src/Ax12.py	/^    def get_moving_speed(self):$/;"	m	class:Ax12
get_present_position	src/Ax12.py	/^    def get_present_position(self):$/;"	m	class:Ax12
get_present_speed	src/Ax12.py	/^    def get_present_speed(self):$/;"	m	class:Ax12
get_punch	src/Ax12.py	/^    def get_punch(self):$/;"	m	class:Ax12
get_register1	src/Ax12.py	/^    def get_register1(self, reg_num):$/;"	m	class:Ax12
get_register2	src/Ax12.py	/^    def get_register2(self, reg_num_low):$/;"	m	class:Ax12
get_return_delay_time	src/Ax12.py	/^    def get_return_delay_time(self):$/;"	m	class:Ax12
get_shutdown	src/Ax12.py	/^    def get_shutdown(self):$/;"	m	class:Ax12
get_status_return_level	src/Ax12.py	/^    def get_status_return_level(self):$/;"	m	class:Ax12
get_temperature	src/Ax12.py	/^    def get_temperature(self):$/;"	m	class:Ax12
get_torque_enable	src/Ax12.py	/^    def get_torque_enable(self):$/;"	m	class:Ax12
get_torque_limit	src/Ax12.py	/^    def get_torque_limit(self):$/;"	m	class:Ax12
get_voltage	src/Ax12.py	/^    def get_voltage(self):$/;"	m	class:Ax12
getch	src/tests/factory_reset.py	/^    def getch():$/;"	f
getch	src/tests/test2.py	/^    def getch():$/;"	f
getch	src/tests/test3.py	/^    def getch():$/;"	f
groupBulkRead	src/tests/test3.py	/^groupBulkRead = GroupBulkRead(portHandler, packetHandler)$/;"	v
index	src/tests/test2.py	/^        index = 1$/;"	v
index	src/tests/test2.py	/^index = 0$/;"	v
index	src/tests/test3.py	/^        index = 1$/;"	v
index	src/tests/test3.py	/^index = 0$/;"	v
is_moving	src/Ax12.py	/^    def is_moving(self):$/;"	m	class:Ax12
is_registered	src/Ax12.py	/^    def is_registered(self):$/;"	m	class:Ax12
main	src/tests/example.py	/^def main(motor_object):$/;"	f
main	src/tests/example_2_motors.py	/^def main(motor_object):$/;"	f
main	src/tests/test.py	/^def main(motor_object, motor_object2):$/;"	f
motor_id	src/tests/example.py	/^motor_id = 2$/;"	v
motor_id	src/tests/test.py	/^motor_id = 1$/;"	v
motor_id2	src/tests/test.py	/^motor_id2 = 2$/;"	v
my_dxl	src/tests/example.py	/^my_dxl = Ax12(motor_id)  $/;"	v
my_dxl	src/tests/example_2_motors.py	/^my_dxl = Ax12(1)  $/;"	v
my_dxl	src/tests/test.py	/^my_dxl = Ax12(motor_id)  $/;"	v
my_dxl2	src/tests/example_2_motors.py	/^my_dxl2 = Ax12(2)  $/;"	v
my_dxl2	src/tests/test.py	/^my_dxl2 = Ax12(motor_id2)  $/;"	v
old_settings	src/tests/factory_reset.py	/^    old_settings = termios.tcgetattr(fd)$/;"	v
old_settings	src/tests/test2.py	/^    old_settings = termios.tcgetattr(fd)$/;"	v
old_settings	src/tests/test3.py	/^    old_settings = termios.tcgetattr(fd)$/;"	v
open_port	src/Ax12.py	/^    def open_port(cls):$/;"	m	class:Ax12
packetHandler	src/tests/factory_reset.py	/^    packetHandler = PacketHandler(PROTOCOL_VERSION)$/;"	v
packetHandler	src/tests/test2.py	/^packetHandler = PacketHandler(PROTOCOL_VERSION)$/;"	v
packetHandler	src/tests/test3.py	/^packetHandler = PacketHandler(PROTOCOL_VERSION)$/;"	v
portHandler	src/tests/factory_reset.py	/^    portHandler = PortHandler(DEVICENAME)$/;"	v
portHandler	src/tests/test2.py	/^portHandler = PortHandler(DEVICENAME)$/;"	v
portHandler	src/tests/test3.py	/^portHandler = PortHandler(DEVICENAME)$/;"	v
print_status	src/Ax12.py	/^    def print_status(dxl_property, dxl_id, value):$/;"	m	class:Ax12
raw2deg	src/Ax12.py	/^    def raw2deg(delta_raw):$/;"	m	class:Ax12
set_alarm_led	src/Ax12.py	/^    def set_alarm_led(self, alarm_led):$/;"	m	class:Ax12
set_baudrate	src/Ax12.py	/^    def set_baudrate(cls):$/;"	m	class:Ax12
set_baudrate	src/Ax12.py	/^    def set_baudrate(self, baudrate):$/;"	m	class:Ax12
set_ccw_angle_limit	src/Ax12.py	/^    def set_ccw_angle_limit(self, angle_limit):$/;"	m	class:Ax12
set_ccw_compliance_margin	src/Ax12.py	/^    def set_ccw_compliance_margin(self, comp_margin):$/;"	m	class:Ax12
set_ccw_compliance_slope	src/Ax12.py	/^    def set_ccw_compliance_slope(self, comp_slope):$/;"	m	class:Ax12
set_cw_angle_limit	src/Ax12.py	/^    def set_cw_angle_limit(self, angle_limit):$/;"	m	class:Ax12
set_cw_compliance_margin	src/Ax12.py	/^    def set_cw_compliance_margin(self, comp_margin):$/;"	m	class:Ax12
set_cw_compliance_slope	src/Ax12.py	/^    def set_cw_compliance_slope(self, comp_slope):$/;"	m	class:Ax12
set_goal_position	src/Ax12.py	/^    def set_goal_position(self, goal_pos):$/;"	m	class:Ax12
set_id	src/Ax12.py	/^    def set_id(self, motor_id):$/;"	m	class:Ax12
set_led	src/Ax12.py	/^    def set_led(self, led_bool):$/;"	m	class:Ax12
set_lock	src/Ax12.py	/^    def set_lock(self, lock_val):$/;"	m	class:Ax12
set_max_torque	src/Ax12.py	/^    def set_max_torque(self, max_torque):$/;"	m	class:Ax12
set_max_voltage_limit	src/Ax12.py	/^    def set_max_voltage_limit(self, max_limit):$/;"	m	class:Ax12
set_min_voltage_limit	src/Ax12.py	/^    def set_min_voltage_limit(self, min_limit):$/;"	m	class:Ax12
set_moving_speed	src/Ax12.py	/^    def set_moving_speed(self, moving_speed):$/;"	m	class:Ax12
set_punch	src/Ax12.py	/^    def set_punch(self, punch_val):$/;"	m	class:Ax12
set_register1	src/Ax12.py	/^    def set_register1(self, reg_num, reg_value):$/;"	m	class:Ax12
set_register2	src/Ax12.py	/^    def set_register2(self, reg_num, reg_value):$/;"	m	class:Ax12
set_return_delay_time	src/Ax12.py	/^    def set_return_delay_time(self, delay_time):$/;"	m	class:Ax12
set_shutdown	src/Ax12.py	/^    def set_shutdown(self, shutdown_value):$/;"	m	class:Ax12
set_status_return_level	src/Ax12.py	/^    def set_status_return_level(self, return_level):$/;"	m	class:Ax12
set_torque_enable	src/Ax12.py	/^    def set_torque_enable(self, torque_bool):$/;"	m	class:Ax12
set_torque_limit	src/Ax12.py	/^    def set_torque_limit(self, torque_limit):$/;"	m	class:Ax12
user_input	src/tests/example.py	/^def user_input():$/;"	f
user_input	src/tests/example_2_motors.py	/^def user_input():$/;"	f
user_input	src/tests/test.py	/^def user_input():$/;"	f
with wrapper	README.md	/^### with wrapper$/;"	S	section:Robot Arm""Usage
without wrapper	README.md	/^### without wrapper$/;"	S	section:Robot Arm""Usage
